{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_encryptionVerifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bounty",
          "type": "address"
        }
      ],
      "name": "BountyCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bounties",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bountyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bountyTemplate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "bytes[]",
          "name": "_dataCIDs",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_labels",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_accuracyThreshold",
          "type": "uint256"
        }
      ],
      "name": "createBounty",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "encryptionVerifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9f492727b8becd2ff72a03f510c04d2c38c7813be4fbc0582f9a4d8c30379031",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "4518643",
    "logsBloom": "0x
    "blockHash": "0xda5470e1c8bd3735cb0841c2a94d7d5855d94c16f234f874b4a7d2fecadbb00b",
    "transactionHash": "0x9f492727b8becd2ff72a03f510c04d2c38c7813be4fbc0582f9a4d8c30379031",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "4518643",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "a55f538547c77f8070c105d3af22e493",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_encryptionVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bounty\",\"type\":\"address\"}],\"name\":\"BountyCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bounties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"_dataCIDs\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_labels\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_accuracyThreshold\",\"type\":\"uint256\"}],\"name\":\"createBounty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encryptionVerifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BountyFactory.sol\":\"BountyFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"contracts/Bounty.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ICircuitVerifier.sol\\\";\\nimport \\\"./IEncryptionVerifier.sol\\\";\\n\\ncontract Bounty is Initializable, OwnableUpgradeable {\\n    uint public completedStep;\\n    IEncryptionVerifier public encryptionVerifier;\\n\\n    // variables set by bounty provier at Tx 1 (constructor)\\n    string public name;\\n    string public description;\\n    bytes[] public dataCIDs;\\n    uint[] public labels;\\n    uint public accuracyThreshold; // in percentage\\n    // reward amount is not stored, use contract balance instead\\n\\n    // variables set by bounty hunter at Tx 2\\n    address public bountyHunter;\\n    bytes public zkeyCID;\\n    bytes public circomCID;\\n    bytes public verifierCID;\\n    ICircuitVerifier public verifier;\\n    uint[2] public a;\\n    uint[2][2] public b;\\n    uint[2] public c;\\n    uint public modelHash;\\n\\n    // variables set by bounty provider at Tx 3\\n    bool public isComplete;\\n    uint[2] public publicKeys;\\n\\n    // variables set by bounty hunter at Tx 4\\n    uint[1005] public input;\\n\\n    uint8 public constant CID_VERSION = 1;\\n    uint8 public constant CID_CODEC = 0x55; // for raw buffer\\n    uint8 public constant CID_HASH = 0x12; // for sha256\\n    uint8 public constant CID_LENGTH = 32; // for sha256\\n\\n    // ! current design only allows one bounty hunter to submit proof\\n    // TODO: allow multiple bounty hunters to submit proof\\n\\n    event BountySubmitted();\\n    event BountyReleased();\\n    event BountyClaimed();\\n\\n    /*\\n        Tx 1\\n        * take owner address from factory\\n        * set bounty details\\n        * receive native tokens as bounty reward\\n    */\\n    function initialize(\\n        address _owner,\\n        string memory _name,\\n        string memory _description,\\n        bytes[] memory _dataCIDs,\\n        uint[] memory _labels,\\n        uint _accuracyThreshold,\\n        address _encryptionVerifier\\n    ) public payable initializer {\\n        require(msg.value > 0, \\\"Bounty reward must be greater than 0\\\");\\n        // length of dataCIDs and labels should be the same\\n        require(\\n            _dataCIDs.length == _labels.length,\\n            \\\"Invalid dataCIDs or labels length\\\"\\n        );\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n        name = _name;\\n        description = _description;\\n        dataCIDs = _dataCIDs;\\n        labels = _labels;\\n        accuracyThreshold = _accuracyThreshold;\\n        encryptionVerifier = IEncryptionVerifier(_encryptionVerifier);\\n\\n        completedStep = 1;\\n    }\\n\\n    /*\\n        Tx 2: submit bounty\\n        * submit CID of zkey, circom\\n        * submit verifier address\\n        * submit proof\\n    */\\n    function submitBounty(\\n        bytes memory _zkeyCID,\\n        bytes memory _circomCID,\\n        bytes memory _verifierCID,\\n        address _verifier,\\n        uint[2] memory _a,\\n        uint[2][2] memory _b,\\n        uint[2] memory _c,\\n        uint[] memory _input\\n    ) public /*\\n     * n = dataCIDs.length\\n     * first n elements of input should be the model output\\n     * the next 2n elements of input should be the splitted dataCIDs\\n     * the last element is the model hash\\n     */\\n    {\\n        require(bountyHunter == address(0), \\\"Bounty already submitted\\\");\\n        // verifier address should not be 0x0\\n        require(_verifier != address(0), \\\"Invalid verifier address\\\");\\n\\n        uint n = dataCIDs.length;\\n        require(_input.length == 3 * n + 1, \\\"Invalid input length\\\");\\n\\n        // check if accuracy threshold is met\\n        uint numCorrect = 0;\\n        for (uint i = 0; i < n; i++) {\\n            if (_input[i] == labels[i]) {\\n                numCorrect++;\\n            }\\n        }\\n        require(\\n            (numCorrect * 100) / n >= accuracyThreshold,\\n            \\\"Accuracy threshold not met\\\"\\n        );\\n\\n        for (uint i = 0; i < dataCIDs.length; i++) {\\n            require(\\n                keccak256(dataCIDs[i]) ==\\n                    keccak256(\\n                        abi.encodePacked(\\n                            CID_VERSION,\\n                            CID_CODEC,\\n                            CID_HASH,\\n                            CID_LENGTH,\\n                            concatDigest(\\n                                _input[n + i * 2],\\n                                _input[n + i * 2 + 1]\\n                            )\\n                        )\\n                    ),\\n                \\\"Data CID mismatch\\\"\\n            );\\n        }\\n\\n        verifier = ICircuitVerifier(_verifier);\\n        require(verifier.verifyProof(_a, _b, _c, _input), \\\"Invalid proof\\\");\\n        a = _a;\\n        b = _b;\\n        c = _c;\\n        modelHash = _input[3 * n];\\n\\n        zkeyCID = _zkeyCID;\\n        circomCID = _circomCID;\\n        verifierCID = _verifierCID;\\n\\n        bountyHunter = msg.sender;\\n\\n        emit BountySubmitted();\\n        completedStep = 2;\\n    }\\n\\n    /*\\n        Tx 3: release bounty\\n        * only callable by bounty provider\\n        * only callable if bounty is not complete\\n        * only callable if bounty hunter has submitted proof\\n    */\\n    function releaseBounty(uint[2] memory _publicKeys) public onlyOwner {\\n        require(!isComplete, \\\"Bounty is already complete\\\");\\n        require(a[0] != 0, \\\"Bounty hunter has not submitted proof\\\");\\n\\n        publicKeys = _publicKeys;\\n        isComplete = true;\\n\\n        emit BountyReleased();\\n        completedStep = 3;\\n    }\\n\\n    /*\\n        Tx 4: claim bounty\\n        * function to submit preimage of hashed input\\n        * only callable if SHA256 of preimage matched hashed input\\n        * only callable if bounty is complete\\n        * _input\\n    */\\n    function claimBounty(\\n        uint[2] memory _a,\\n        uint[2][2] memory _b,\\n        uint[2] memory _c,\\n        uint[1005] memory _input\\n        /*\\n            * first element is the model hash\\n            * the next element is the shared key\\n            * the next 1001 elements are the encrypted input\\n            * the last 2 elements are the public keys\\n        */\\n    ) public {\\n        require(\\n            msg.sender == bountyHunter,\\n            \\\"Only bounty hunter can claim bounty\\\"\\n        );\\n        require(isComplete, \\\"Bounty is not complete\\\");\\n        require(address(this).balance > 0, \\\"Bounty already claimed\\\");\\n\\n        // verify model hash\\n        require(\\n            modelHash == _input[0],\\n            \\\"Model hash does not match submitted proof\\\"\\n        );\\n\\n        // verify public keys\\n        require(\\n            publicKeys[0] == _input[1003] && publicKeys[1] == _input[1004],\\n            \\\"Public keys do not match\\\"\\n        );\\n\\n        // verify encryption\\n        require(\\n            encryptionVerifier.verifyProof(_a, _b, _c, _input),\\n            \\\"Invalid encryption\\\"\\n        );\\n        input = _input;\\n        payable(msg.sender).transfer(address(this).balance);\\n\\n        emit BountyClaimed();\\n        completedStep = 4;\\n    }\\n\\n    // function to concat input into digest\\n    function concatDigest(\\n        uint input1,\\n        uint input2\\n    ) public pure returns (bytes32) {\\n        return bytes32((input1 << 128) + input2);\\n    }\\n\\n    // view function to verify proof\\n    function verifyProof(\\n        uint[2] memory _a,\\n        uint[2][2] memory _b,\\n        uint[2] memory _c,\\n        uint[] memory _input\\n    ) public view returns (bool) {\\n        return verifier.verifyProof(_a, _b, _c, _input);\\n    }\\n\\n    // view function to verify encryption\\n    function verifyEncryption(\\n        uint[2] memory _a,\\n        uint[2][2] memory _b,\\n        uint[2] memory _c,\\n        uint[1005] memory _input\\n    ) public view returns (bool) {\\n        return encryptionVerifier.verifyProof(_a, _b, _c, _input);\\n    }\\n    \\n    // TODO: function to cancel bounty and withdraw reward\\n\\n    // TODO: function to edit bounty details\\n}\\n\",\"keccak256\":\"0x7276bba8b03c024ab36b0de242369a4cb750b6be67bfc02b8ef0dc78ab2aba36\",\"license\":\"GPL-3.0\"},\"contracts/BountyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Bounty.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\ncontract BountyFactory {\\n    address public immutable encryptionVerifier;\\n    address public immutable bountyTemplate;\\n    address[] public bounties;\\n    uint public bountyCount;\\n\\n    event BountyCreated(address indexed bounty);\\n\\n    constructor(address _encryptionVerifier) {\\n        encryptionVerifier = _encryptionVerifier;\\n        bountyTemplate = address(new Bounty());\\n    }\\n\\n    function createBounty(\\n        string memory _name,\\n        string memory _description,\\n        bytes[] memory _dataCIDs,\\n        uint[] memory _labels,\\n        uint _accuracyThreshold\\n    ) public payable returns (address) {\\n        require(msg.value > 0, \\\"BountyFactory: must send more than 0 wei to create bounty\\\");\\n        address clone = Clones.clone(bountyTemplate);\\n        Bounty(clone).initialize{value: msg.value}(\\n            msg.sender,\\n            _name,\\n            _description,\\n            _dataCIDs,\\n            _labels,\\n            _accuracyThreshold,\\n            encryptionVerifier\\n        );\\n        bounties.push(clone);\\n        emit BountyCreated(clone);\\n        bountyCount++;\\n        return clone;\\n    }\\n}\",\"keccak256\":\"0x70888ccbfdf0b2227a05a092a54ef617831abbca6fdd625b823ac5df951b8e2a\",\"license\":\"GPL-3.0\"},\"contracts/ICircuitVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\ninterface ICircuitVerifier {\\n    function verifyProof(\\n        uint[2] memory a,\\n        uint[2][2] memory b,\\n        uint[2] memory c,\\n        uint[] memory input\\n    ) external view returns (bool);\\n}\",\"keccak256\":\"0x74b0e89a0d68ec2835a7845409ef056b9207822c7b221054f20f9fb51ab519c9\",\"license\":\"GPL-3.0\"},\"contracts/IEncryptionVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\ninterface IEncryptionVerifier {\\n    function verifyProof(\\n        uint[2] memory a,\\n        uint[2][2] memory b,\\n        uint[2] memory c,\\n        uint[1005] memory input\\n    ) external view returns (bool);\\n}\",\"keccak256\":\"0xb9ff075e1bf7a6c5fdf55fbfec97c083e2e97ba4be18e547fd41241546bcc720\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c80632ee945411461004f5780633e362c961461007a57806347e66947146100a5578063dc2f8744146100d0578063e2b47c561461010d575b600080fd5b34801561005b57600080fd5b5061006461013d565b6040516100719190610499565b60405180910390f35b34801561008657600080fd5b5061008f610161565b60405161009c91906104cd565b60405180910390f35b3480156100b157600080fd5b506100ba610167565b6040516100c79190610499565b60405180910390f35b3480156100dc57600080fd5b506100f760048036038101906100f29190610528565b61018b565b6040516101049190610499565b60405180910390f35b610127600480360381019061012291906108e5565b6101ca565b6040516101349190610499565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061019b57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080341161020e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020590610a53565b60405180910390fd5b60006102397f000000000000000000000000000000000000000000000000000000000000000061039e565b90508073ffffffffffffffffffffffffffffffffffffffff166316bb7c4634338a8a8a8a8a7f00000000000000000000000000000000000000000000000000000000000000006040518963ffffffff1660e01b81526004016102a19796959493929190610cb6565b6000604051808303818588803b1580156102ba57600080fd5b505af11580156102ce573d6000803e3d6000fd5b50505050506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f296fd2c434595e170589ead76f71af701ab651dd12e03e8c108123ec7c809a7360405160405180910390a26001600081548092919061038c90610d70565b91905055508091505095945050505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f09050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610453576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044a90610e04565b60405180910390fd5b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061048382610458565b9050919050565b61049381610478565b82525050565b60006020820190506104ae600083018461048a565b92915050565b6000819050919050565b6104c7816104b4565b82525050565b60006020820190506104e260008301846104be565b92915050565b6000604051905090565b600080fd5b600080fd5b610505816104b4565b811461051057600080fd5b50565b600081359050610522816104fc565b92915050565b60006020828403121561053e5761053d6104f2565b5b600061054c84828501610513565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105a88261055f565b810181811067ffffffffffffffff821117156105c7576105c6610570565b5b80604052505050565b60006105da6104e8565b90506105e6828261059f565b919050565b600067ffffffffffffffff82111561060657610605610570565b5b61060f8261055f565b9050602081019050919050565b82818337600083830152505050565b600061063e610639846105eb565b6105d0565b90508281526020810184848401111561065a5761065961055a565b5b61066584828561061c565b509392505050565b600082601f83011261068257610681610555565b5b813561069284826020860161062b565b91505092915050565b600067ffffffffffffffff8211156106b6576106b5610570565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff8211156106e7576106e6610570565b5b6106f08261055f565b9050602081019050919050565b600061071061070b846106cc565b6105d0565b90508281526020810184848401111561072c5761072b61055a565b5b61073784828561061c565b509392505050565b600082601f83011261075457610753610555565b5b81356107648482602086016106fd565b91505092915050565b600061078061077b8461069b565b6105d0565b905080838252602082019050602084028301858111156107a3576107a26106c7565b5b835b818110156107ea57803567ffffffffffffffff8111156107c8576107c7610555565b5b8086016107d5898261073f565b855260208501945050506020810190506107a5565b5050509392505050565b600082601f83011261080957610808610555565b5b813561081984826020860161076d565b91505092915050565b600067ffffffffffffffff82111561083d5761083c610570565b5b602082029050602081019050919050565b600061086161085c84610822565b6105d0565b90508083825260208201905060208402830185811115610884576108836106c7565b5b835b818110156108ad57806108998882610513565b845260208401935050602081019050610886565b5050509392505050565b600082601f8301126108cc576108cb610555565b5b81356108dc84826020860161084e565b91505092915050565b600080600080600060a08688031215610901576109006104f2565b5b600086013567ffffffffffffffff81111561091f5761091e6104f7565b5b61092b8882890161066d565b955050602086013567ffffffffffffffff81111561094c5761094b6104f7565b5b6109588882890161066d565b945050604086013567ffffffffffffffff811115610979576109786104f7565b5b610985888289016107f4565b935050606086013567ffffffffffffffff8111156109a6576109a56104f7565b5b6109b2888289016108b7565b92505060806109c388828901610513565b9150509295509295909350565b600082825260208201905092915050565b7f426f756e7479466163746f72793a206d7573742073656e64206d6f726520746860008201527f616e20302077656920746f2063726561746520626f756e747900000000000000602082015250565b6000610a3d6039836109d0565b9150610a48826109e1565b604082019050919050565b60006020820190508181036000830152610a6c81610a30565b9050919050565b600081519050919050565b60005b83811015610a9c578082015181840152602081019050610a81565b60008484015250505050565b6000610ab382610a73565b610abd81856109d0565b9350610acd818560208601610a7e565b610ad68161055f565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000610b3482610b0d565b610b3e8185610b18565b9350610b4e818560208601610a7e565b610b578161055f565b840191505092915050565b6000610b6e8383610b29565b905092915050565b6000602082019050919050565b6000610b8e82610ae1565b610b988185610aec565b935083602082028501610baa85610afd565b8060005b85811015610be65784840389528151610bc78582610b62565b9450610bd283610b76565b925060208a01995050600181019050610bae565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610c2d816104b4565b82525050565b6000610c3f8383610c24565b60208301905092915050565b6000602082019050919050565b6000610c6382610bf8565b610c6d8185610c03565b9350610c7883610c14565b8060005b83811015610ca9578151610c908882610c33565b9750610c9b83610c4b565b925050600181019050610c7c565b5085935050505092915050565b600060e082019050610ccb600083018a61048a565b8181036020830152610cdd8189610aa8565b90508181036040830152610cf18188610aa8565b90508181036060830152610d058187610b83565b90508181036080830152610d198186610c58565b9050610d2860a08301856104be565b610d3560c083018461048a565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d7b826104b4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610dad57610dac610d41565b5b600182019050919050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b6000610dee6016836109d0565b9150610df982610db8565b602082019050919050565b60006020820190508181036000830152610e1d81610de1565b905091905056fea2646970667358221220992f49b901721d2d4f6692b3773be1376b6f978f664a27095cc8a3e0a28b1ced64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1325,
        "contract": "contracts/BountyFactory.sol:BountyFactory",
        "label": "bounties",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1327,
        "contract": "contracts/BountyFactory.sol:BountyFactory",
        "label": "bountyCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}